<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.warehouse.mapper.goods2pack.Goods2packMapper">
  <resultMap id="BaseResultMap" type="com.example.warehouse.entity.Goods2pack">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="goods_id" jdbcType="INTEGER" property="goodsId" />
    <result column="pack_id" jdbcType="INTEGER" property="packId" />
    <result column="son_pack_id" jdbcType="INTEGER" property="sonPackId" />
    <result column="status" jdbcType="INTEGER" property="status" />
  </resultMap>
  <sql id="Base_Column_List">
    id, goods_id, pack_id, status
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from goods2pack
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from goods2pack
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="com.example.warehouse.entity.Goods2pack" useGeneratedKeys="true">
    insert into goods2pack (goods_id, pack_id, status)
    values (#{goodsId,jdbcType=INTEGER}, #{packId,jdbcType=INTEGER}, #{status,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="com.example.warehouse.entity.Goods2pack" useGeneratedKeys="true">
    insert into goods2pack
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="goodsId != null and goodsId != ''">
        goods_id,
      </if>
      <if test="packId != null and packId != ''">
        pack_id,
      </if>
      <if test="status != null and status != ''">
        status,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="goodsId != null and goodsId != ''">
        #{goodsId,jdbcType=INTEGER},
      </if>
      <if test="packId != null and packId != ''">
        #{packId,jdbcType=INTEGER},
      </if>
      <if test="status != null and status != ''">
        #{status,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.example.warehouse.entity.Goods2pack">
    update goods2pack
    <set>
      <if test="goodsId != null and packId != ''">
        goods_id = #{goodsId,jdbcType=INTEGER},
      </if>
      <if test="packId != null and packId != ''">
        pack_id = #{packId,jdbcType=INTEGER},
      </if>
      <if test="status != null and status != ''">
        status = #{status,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.example.warehouse.entity.Goods2pack">
    update goods2pack
    set goods_id = #{goodsId,jdbcType=INTEGER},
      pack_id = #{packId,jdbcType=INTEGER},
      status = #{status,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <select id="findByGoodsId" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select <include refid="Base_Column_List"/>
    from <include refid="table"/>
    where goods_id = #{goodsId} and status = 1
  </select>

  <select id="findByPackId" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select t.id, t.goods_id, t.pack_id, t.status
    from <include refid="table"/> t
    left join goods g on g.id = t.goods_id
    where
    t.pack_id = #{packId}
    and t.status = 1
    and g.status = 1
  </select>

  <update id="deleteByPackId" parameterType="java.lang.Integer">
    update goods2pack
    set status = 0
    where pack_id = #{packId,jdbcType=INTEGER}
  </update>

  <update id="deleteByPackIdList">
    update goods2pack
    set status = 0
    where
    pack_id in
    <foreach collection="packIdList" open="(" close=")" item="packId" separator=",">
        #{packId,jdbcType=INTEGER}
    </foreach>
  </update>

  <!--<update id="updateGoods2PackList">

    <foreach collection="goods2packList" item="item" separator=";">
      update goods2pack
      set
      son_pack_id = #{item.sonPackId},
      pack_id = #{item.packId},
      goods_id = #{item.goodsId}
      where
      status = 1 and id = #{item.id}
    </foreach>
  </update>-->

  <update id="resetBySonPackId">
    update goods2pack
    set son_pack_id = 0
    where pack_id = #{packId,jdbcType=INTEGER} and son_pack_id = #{sonPackId}
  </update>

  <update id="resetAllByPackId" parameterType="java.lang.Integer">
    update goods2pack
    set son_pack_id = 0
    where pack_id = #{packId,jdbcType=INTEGER} and status = 1
  </update>

  <select id="findGoodsIdBySonPackIdList" parameterType="java.util.List" resultType="java.lang.Integer">
    select goods_id as goodsId
    from
    goods2pack
    <if test="sonPackIdList != null">
      <where>
        son_pack_id in
        <foreach collection="sonPackIdList" item="sonPackId" open="(" close=")" separator=",">
          #{sonPackId}
        </foreach>
      </where>
    </if>
  </select>

  <select id="selectEntityByGoodsNoList" parameterType="java.util.List" resultMap="BaseResultMap">
    select t.*
    from <include refid="table"/> t
    left join goods g on t.goods_id = g.id
    where
        g.status = 1
    and
        t.status = 1
    and
        g.goods_no in
    <foreach collection="goodsNoList" item="goodsNo" open="(" close=")" separator=",">
      #{goodsNo}
    </foreach>
  </select>

  <update id="initByCustomerPackNumberId" parameterType="java.lang.Integer">
    update goods2pack
    set son_pack_id = 0
    where son_pack_id = #{sonPackId} and status = 1
  </update>

  <select id="findRemoveGoodsIds" resultType="java.lang.Integer">
    select goods_id from <include refid="table"/>
    where
    son_pack_id = #{customerPackNumberId}
    and
    status = 1
    and
    goods_id not in
    <foreach collection="goodsIds" item="goodsId" open="(" close=")" separator=",">
      #{goodsId}
    </foreach>
  </select>

  <update id="resetInPacked">
    update goods2pack
    set son_pack_id = 0
    where
    status = 1
    and
    goods_id in
    <foreach collection="outPackGIds" item="goodsId" open="(" close=")" separator=",">
      #{goodsId}
    </foreach>
  </update>

  <insert id="insertList" parameterType="java.util.List">
    insert into goods2pack (goods_id, pack_id, son_pack_id, status)
    values
    <foreach collection="goods2packList" item="item" separator=",">
      (#{item.goodsId,jdbcType=INTEGER}, #{item.packId,jdbcType=INTEGER}, #{item.sonPackId,jdbcType=INTEGER}, #{item.status,jdbcType=INTEGER})
    </foreach>
  </insert>

  <sql id="table">goods2pack</sql>
</mapper>