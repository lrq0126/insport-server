<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.warehouse.mapper.backlog.BacklogMapper">
    <resultMap id="BaseResultMap" type="com.example.warehouse.entity.backlog.Backlog">
        <id column="id" jdbcType="INTEGER" property="id"/>
    	
	    <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="create_id" jdbcType="INTEGER" property="createId"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
        <result column="update_id" jdbcType="INTEGER" property="updateId"/>
        <result column="status" jdbcType="INTEGER" property="status"/>
        <result column="version" jdbcType="INTEGER" property="version"/>
        <result column="remarks" jdbcType="VARCHAR" property="remarks"/>
        <result column="title" jdbcType="VARCHAR" property="title"/>
        <result column="content" jdbcType="VARCHAR" property="content"/>
        <result column="backlogger_id" jdbcType="INTEGER" property="backloggerId"/>
        <result column="backlogger" jdbcType="VARCHAR" property="backlogger"/>
        <result column="backlog_type" jdbcType="INTEGER" property="backlogType"/>
        <result column="backlog_status" jdbcType="INTEGER" property="backlogStatus"/>
        <result column="overdue_time" jdbcType="TIMESTAMP" property="overdueTime"/>
        <result column="associated_order" jdbcType="VARCHAR" property="associatedOrder"/>
    		
    </resultMap>
	
	<!-- 字段 -->
	<sql id="Base_Column_List">
		id, create_time, create_id, update_time, update_id,
		status, version, remarks, title, content,
		backlogger_id, backlogger, backlog_type, backlog_status, overdue_time,
		associated_order
	</sql>
	
	<!-- 插入字段实际数值 -->
	<sql id="Insert_Column_Values">
		#{createTime},#{createId},#{updateTime},#{updateId},
		#{status},#{version},#{remarks},#{title},#{content},
		#{backloggerId},#{backlogger},#{backlogType},#{backlogStatus},#{overdueTime},
		#{associatedOrder}
	</sql>
	
	<!-- 插入字段（判空） -->
	<sql id="Base_Column_List_NotNull">
		<if test="createTime != null and createTime != ''">
			create_time, 
		</if>
    	<if test="createId != null and createId != ''">
			create_id, 
		</if>
    	<if test="updateTime != null and updateTime != ''">
			update_time, 
		</if>
    	<if test="updateId != null and updateId != ''">
			update_id, 
		</if>
    	<if test="status != null and status != ''">
			status, 
		</if>
    	<if test="version != null and version != ''">
			version, 
		</if>
    	<if test="remarks != null and remarks != ''">
			remarks, 
		</if>
    	<if test="title != null and title != ''">
			title, 
		</if>
    	<if test="content != null and content != ''">
			content, 
		</if>
    	<if test="backloggerId != null and backloggerId != ''">
			backlogger_id, 
		</if>
    	<if test="backlogger != null and backlogger != ''">
			backlogger, 
		</if>
    	<if test="backlogType != null and backlogType != ''">
			backlog_type, 
		</if>
    	<if test="backlogStatus != null and backlogStatus != ''">
			backlog_status,
		</if>
    	<if test="overdueTime != null and overdueTime != ''">
			overdue_time, 
		</if>
    	<if test="associatedOrder != null and associatedOrder != ''">
			associated_order, 
		</if>
    	
	</sql>
	
	<!-- 插入字段实际数值(判空) -->
	<sql id="Insert_Column_Values_NotNull">
		<if test="createTime != null and createTime != ''">
			#{createTime},
		</if>
    	<if test="createId != null and createId != ''">
			#{createId},
		</if>
    	<if test="updateTime != null and updateTime != ''">
			#{updateTime},
		</if>
    	<if test="updateId != null and updateId != ''">
			#{updateId},
		</if>
    	<if test="status != null and status != ''">
			#{status},
		</if>
    	<if test="version != null and version != ''">
			#{version},
		</if>
    	<if test="remarks != null and remarks != ''">
			#{remarks},
		</if>
    	<if test="title != null and title != ''">
			#{title},
		</if>
    	<if test="content != null and content != ''">
			#{content},
		</if>
    	<if test="backloggerId != null and backloggerId != ''">
			#{backloggerId},
		</if>
    	<if test="backlogger != null and backlogger != ''">
			#{backlogger},
		</if>
    	<if test="backlogType != null and backlogType != ''">
			#{backlogType},
		</if>
    	<if test="backlogStatus != null and backlogStatus != ''">
			#{backlogStatus},
		</if>
    	<if test="overdueTime != null and overdueTime != ''">
			#{overdueTime},
		</if>
    	<if test="associatedOrder != null and associatedOrder != ''">
			#{associatedOrder},
		</if>
    	
	</sql>
	
	<!-- 更新字段 -->
	<sql id="Update_Column">
		create_time = #{createTime},
    	create_id = #{createId},
    	update_time = #{updateTime},
    	update_id = #{updateId},
    	status = #{status},
    	version = #{version},
    	remarks = #{remarks},
    	title = #{title},
    	content = #{content},
    	backlogger_id = #{backloggerId},
    	backlogger = #{backlogger},
    	backlog_type = #{backlogType},
    	backlog_status = #{backlogStatus},
    	overdue_time = #{overdueTime},
    	associated_order = #{associatedOrder}
	</sql>
	
	<!-- 更新字段（判空） -->
	<sql id="Update_Column_NotNull">
		<if test="createTime != null and createTime != ''">
			create_time = #{createTime},
		</if>
    	<if test="createId != null and createId != ''">
			create_id = #{createId},
		</if>
    	<if test="updateTime != null and updateTime != ''">
			update_time = #{updateTime},
		</if>
    	<if test="updateId != null and updateId != ''">
			update_id = #{updateId},
		</if>
    	<if test="status != null and status != ''">
			status = #{status},
		</if>
    	<if test="version != null and version != ''">
			version = #{version},
		</if>
    	<if test="remarks != null and remarks != ''">
			remarks = #{remarks},
		</if>
    	<if test="title != null and title != ''">
			title = #{title},
		</if>
    	<if test="content != null and content != ''">
			content = #{content},
		</if>
    	<if test="backloggerId != null and backloggerId != ''">
			backlogger_id = #{backloggerId},
		</if>
    	<if test="backlogger != null and backlogger != ''">
			backlogger = #{backlogger},
		</if>
    	<if test="backlogType != null and backlogType != ''">
			backlog_type = #{backlogType},
		</if>
    	<if test="backlogStatus != null and backlogStatus != ''">
			backlog_status = #{backlogStatus},
		</if>
    	<if test="overdueTime != null and overdueTime != ''">
			overdue_time = #{overdueTime},
		</if>
    	<if test="associatedOrder != null and associatedOrder != ''">
			associated_order = #{associatedOrder},
		</if>
    	
	</sql>
	
	<select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <trim suffixOverrides=",">
        <include refid="Base_Column_List"/>
        </trim>
        from backlog
        where id = #{id,jdbcType=INTEGER}
    </select>
	
	<insert id="insert" parameterType="com.example.warehouse.entity.backlog.Backlog">
		insert into backlog
		<trim prefix="(" suffix=")" suffixOverrides=",">
			create_time, 
			create_id, 
			update_time, 
			update_id, 
			status, 
			version, 
			remarks, 
			title, 
			content, 
			backlogger_id, 
			backlogger, 
			backlog_type,
			backlog_status,
			overdue_time,
			associated_order
		</trim>
		values
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<include refid="Insert_Column_Values"/>
		</trim>
	</insert>
	
	<insert id="insertSelective" parameterType="com.example.warehouse.entity.backlog.Backlog">
		insert into backlog
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<include refid="Base_Column_List_NotNull"/>
		</trim>
		values
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<include refid="Insert_Column_Values_NotNull"/>
		</trim>
	</insert>
	
	<update id="updateByPrimaryKey" parameterType="com.example.warehouse.entity.backlog.Backlog">
		update backlog
		<set>
			<include refid="Update_Column"/>
		</set>
		
		<where>
		id = #{id} and status = 1
		</where>
		
	</update>
	
	<update id="updateByPrimaryKeySelective" parameterType="com.example.warehouse.entity.backlog.Backlog">
		update backlog
		<set>
			<include refid="Update_Column_NotNull"/>
		</set>
		<where>
		id = #{id} and status = 1
		</where>
	</update>

	<!-- 删除数据（逻辑删除） -->
	<update id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		update  backlog
		set `status` = 0
		where id = #{id,jdbcType=INTEGER}
	</update>
	
	<!-- 移除数据（物理删除） -->
	<delete id="removeByPrimaryKey" parameterType="java.lang.Integer">
		delete from backlog
		where id = #{id,jdbcType=INTEGER}
	</delete>

	<update id="upBacklogStatus">
		update backlog
		set backlog_status = #{backlogStatus}
		where id = #{id}
	</update>

	<select id="getBacklogDetailById" resultMap="BacklogDetailMap">
		select <include refid="entityColumn"/>, u.username, sdd.sdd_name
		from backlog t
		left join user u on u.id = t.create_id
		left join ( select id, alternate_field, sdd_name from sys_dict_detail where sdm_code = 'backlog_type' and status = 1) sdd on sdd.alternate_field = t.backlog_type
		<where>
			t.status = 1
			and t.id = #{id}
		</where>
	</select>

	<resultMap id="BacklogDetailMap" extends="BacklogMap" type="com.example.warehouse.vo.backlogVo.BacklogRespVo">
		<collection property="backlogDetails" column="id" select="com.example.warehouse.mapper.backlog.BacklogDetailMapper.getBacklogDetailByBacklogId"/>
	</resultMap>

	<select id="getBacklogCount" resultType="java.lang.Integer">
		select count(1)
		from backlog
		<where>
			status = 1
			<if test="title != null and title != ''">
				and title regexp #{title}
			</if>
			<if test="content != null and content != ''">
				and content regexp #{content}
			</if>
			<if test="backloggerId != null">
				and backlogger_id = #{backloggerId}
			</if>
			<if test="backlogger != null and backlogger != ''">
				and backlogger regexp #{backlogger}
			</if>
			<if test="backlogType != null">
				and backlog_type = #{backlogType}
			</if>
			<if test="backlogStatus != null">
				and backlog_status = #{backlogStatus}
			</if>
			<if test="associatedOrder != null and associatedOrder != ''">
				and associated_order regexp #{associated_order}
			</if>
			<if test="startTime != null and startTime != ''">
				and create_time BETWEEN #{startTime} and #{endTime}
			</if>
		</where>
	</select>

	<select id="getBacklogList" resultMap="BacklogMap">
		select <include refid="entityColumn"/>, u.username, sdd.sdd_name
		from backlog t
		left join user u on u.id = t.create_id
		left join ( select id, alternate_field, sdd_name from sys_dict_detail where sdm_code = 'backlog_type' and status = 1) sdd on sdd.alternate_field = t.backlog_type
		<where>
			t.status = 1
			<if test="title != null and title != ''">
				and t.title regexp #{title}
			</if>
			<if test="content != null and content != ''">
				and t.content regexp #{content}
			</if>
			<if test="backloggerId != null">
				and backlogger_id = #{backloggerId}
			</if>
			<if test="backlogger != null and backlogger != ''">
				and t.backlogger regexp #{backlogger}
			</if>
			<if test="backlogType != null">
				and t.backlog_type = #{backlogType}
			</if>
			<if test="backlogStatus != null">
				and t.backlog_status = #{backlogStatus}
			</if>
			<if test="associatedOrder != null and associatedOrder != ''">
				and t.associated_order regexp #{associated_order}
			</if>
			<if test="startTime != null and startTime != ''">
				and t.create_time BETWEEN #{startTime} and #{endTime}
			</if>
		</where>
		order by t.create_time
		limit #{pageNumber}, #{pageSize}
	</select>

	<select id="getHomeBacklogList" resultType="com.example.warehouse.entity.backlog.Backlog">
		select id, title, DATE_FORMAT(create_time, '%Y-%m-%d') as createTime, backlog_status as backlogStatus
		from backlog
		<where>
			status = 1
			and backlogger_id = #{userId}
			and (backlog_status = 0 or backlog_status = 1)
		</where>
		order by create_time desc
		limit 0, 3
	</select>

	<resultMap id="BacklogMap" extends="BaseResultMap" type="com.example.warehouse.vo.backlogVo.BacklogRespVo">
		<result column="username" property="createName"/>
		<result column="sdd_name" property="backlogTypeName"/>
	</resultMap>

	<sql id="entityColumn">
		t.id,
		t.create_id,
		DATE_FORMAT(t.create_time, '%Y-%m-%d %k:%i:%s') as create_time,
		DATE_FORMAT(t.update_time, '%Y-%m-%d %k:%i:%s') as update_time,
		DATE_FORMAT(t.overdue_time, '%Y-%m-%d') as overdue_time,
		t.remarks, t.title, t.content,
		t.backlogger_id, t.backlogger, t.backlog_type, t.backlog_status,
		t.associated_order
	</sql>
	
</mapper>