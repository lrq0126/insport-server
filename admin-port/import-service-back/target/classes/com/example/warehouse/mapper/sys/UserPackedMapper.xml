<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.warehouse.mapper.sys.UserPackedMapper">
    <resultMap id="BaseResultMap" type="com.example.warehouse.entity.sys.UserPacked">
        <id column="id" jdbcType="INTEGER" property="id"/>
    	
	    <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="create_id" jdbcType="INTEGER" property="createId"/>
        <result column="create_name" jdbcType="VARCHAR" property="createName"/>
        <result column="status" jdbcType="INTEGER" property="status"/>
        <result column="version" jdbcType="INTEGER" property="version"/>
        <result column="remarks" jdbcType="VARCHAR" property="remarks"/>
        <result column="pack_id" jdbcType="INTEGER" property="packId"/>
        <result column="order_number" jdbcType="VARCHAR" property="orderNumber"/>
        <result column="pack_num" jdbcType="INTEGER" property="packNum"/>
        <result column="actual_weight" jdbcType="DOUBLE" property="actualWeight"/>
        <result column="actual_vol" jdbcType="DOUBLE" property="actualVol"/>
    </resultMap>

	<resultMap id="EntityRespVo" extends="BaseResultMap" type="com.example.warehouse.entity.sys.UserPacked">
		<result column="customer_name" jdbcType="VARCHAR" property="customerName"/>
		<result column="login_name" jdbcType="VARCHAR" property="loginName"/>
		<result column="route_name" jdbcType="VARCHAR" property="routeName"/>
		<result column="route_type" jdbcType="INTEGER" property="routeType"/>
		<result column="destination" jdbcType="VARCHAR" property="destination"/>
		<result column="pack_type" jdbcType="INTEGER" property="packType"/>
	</resultMap>
	<!-- 字段 -->
	<sql id="Base_Column_List">
		id, create_time, create_id, create_name, status, version, remarks,
		pack_id, order_number, pack_num, actual_weight, actual_vol
	</sql>
	
	<!-- 插入字段实际数值 -->
	<sql id="Insert_Column_Values">
		#{createTime},#{createId},#{createName},#{status},#{version},#{remarks},
		#{packId},#{orderNumber},#{packNum},#{actualWeight},#{actualVol}
	</sql>
	
	<!-- 插入字段（判空） -->
	<sql id="Base_Column_List_NotNull">
		<if test="createTime != null and createTime != ''">
			create_time, 
		</if>
    	<if test="createId != null and createId != ''">
			create_id, 
		</if>
    	<if test="createName != null and createName != ''">
			create_name, 
		</if>
    	<if test="status != null and status != ''">
			status, 
		</if>
    	<if test="version != null and version != ''">
			version, 
		</if>
    	<if test="remarks != null and remarks != ''">
			remarks, 
		</if>
    	<if test="packId != null and packId != ''">
			pack_id, 
		</if>
    	<if test="orderNumber != null and orderNumber != ''">
			order_number, 
		</if>
    	<if test="packNum != null and packNum != ''">
			pack_num, 
		</if>
    	<if test="actualWeight != null and actualWeight != ''">
			actual_weight, 
		</if>
    	<if test="actualVol != null and actualVol != ''">
			actual_vol, 
		</if>
    	
	</sql>
	
	<!-- 插入字段实际数值(判空) -->
	<sql id="Insert_Column_Values_NotNull">
		<if test="createTime != null and createTime != ''">
			#{createTime},
		</if>
    	<if test="createId != null and createId != ''">
			#{createId},
		</if>
    	<if test="createName != null and createName != ''">
			#{createName},
		</if>
    	<if test="status != null and status != ''">
			#{status},
		</if>
    	<if test="version != null and version != ''">
			#{version},
		</if>
    	<if test="remarks != null and remarks != ''">
			#{remarks},
		</if>
    	<if test="packId != null and packId != ''">
			#{packId},
		</if>
    	<if test="orderNumber != null and orderNumber != ''">
			#{orderNumber},
		</if>
    	<if test="packNum != null and packNum != ''">
			#{packNum},
		</if>
    	<if test="actualWeight != null and actualWeight != ''">
			#{actualWeight},
		</if>
    	<if test="actualVol != null and actualVol != ''">
			#{actualVol},
		</if>
    	
	</sql>
	
	<!-- 更新字段 -->
	<sql id="Update_Column">
		create_time = #{createTime},
    	create_id = #{createId},
    	create_name = #{createName},
    	status = #{status},
    	version = #{version},
    	remarks = #{remarks},
    	pack_id = #{packId},
    	order_number = #{orderNumber},
    	pack_num = #{packNum},
    	actual_weight = #{actualWeight},
    	actual_vol = #{actualVol}
    	
	</sql>
	
	<!-- 更新字段（判空） -->
	<sql id="Update_Column_NotNull">
		<if test="createTime != null and createTime != ''">
			create_time = #{createTime},
		</if>
    	<if test="createId != null and createId != ''">
			create_id = #{createId},
		</if>
    	<if test="createName != null and createName != ''">
			create_name = #{createName},
		</if>
    	<if test="status != null and status != ''">
			status = #{status},
		</if>
    	<if test="version != null and version != ''">
			version = #{version},
		</if>
    	<if test="remarks != null and remarks != ''">
			remarks = #{remarks},
		</if>
    	<if test="packId != null and packId != ''">
			pack_id = #{packId},
		</if>
    	<if test="orderNumber != null and orderNumber != ''">
			order_number = #{orderNumber},
		</if>
    	<if test="packNum != null and packNum != ''">
			pack_num = #{packNum},
		</if>
    	<if test="actualWeight != null and actualWeight != ''">
			actual_weight = #{actualWeight},
		</if>
    	<if test="actualVol != null and actualVol != ''">
			actual_vol = #{actualVol},
		</if>
    	
	</sql>
	
	<select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <trim suffixOverrides=",">
        <include refid="Base_Column_List"/>
        </trim>
        from user_packed
        where id = #{id,jdbcType=INTEGER}
    </select>
	<select id="getUserPackedCount" resultType="java.lang.Integer">
		select count(1)
		from user_packed t
		left join customer_pack cp on t.pack_id = cp.id and cp.status = 1
		left join transportation_route route on route.id = cp.transportation_route_id
		left join `user` u on u.id = t.create_id and u.status = 1
		<where>
			t.status = 1
			<if test="commercialAreaId!= null">
				and u.commercial_area_id = #{commercialAreaId}
			</if>
			<if test="createName != null and createName != ''">
				and t.create_name regexp #{createName}
			</if>
			<if test="orderNumber != null and orderNumber != ''">
				and t.order_number regexp #{orderNumber}
			</if>
			<if test="packType != null">
				and cp.pack_type = #{packType}
			</if>
			<if test="customerName != null and customerName != ''">
				and cus.customer_name regexp #{customerName}
			</if>
			<if test="loginName != null and loginName != ''">
				and cus.login_name regexp #{loginName}
			</if>
			<if test="routeName != null and routeName != ''">
				and route.route_name regexp #{routeName}
			</if>
			<if test="destination != null and destination != ''">
				and route.destination regexp #{destination}
			</if>
			<if test="routeType != null">
				and route.route_type = #{routeType}
			</if>
			<if test="startTime != null and startTime != ''">
				and t.create_time between #{startTime} and #{endTime}
			</if>
		</where>
	</select>
	<select id="getUserPackedList" resultMap="EntityRespVo">
		select t.id, t.create_time, t.create_id, t.create_name,
		t.pack_id, t.order_number, t.pack_num, t.actual_weight, t.actual_vol,
		route.route_name, route.transport_type as route_type, route.destination,
  		cus.customer_name, cus.login_name,
		cp.pack_type
		from user_packed t
		left join customer_pack cp on t.pack_id = cp.id and cp.status = 1
		left join transportation_route route on route.id = cp.transportation_route_id
		left join customer cus on cus.id = cp.customer_id
		left join `user` u on u.id = t.create_id
		<where>
			t.status = 1
			<if test="commercialAreaId!= null">
				and u.commercial_area_id = #{commercialAreaId}
			</if>
			<if test="createName != null and createName != ''">
				and t.create_name regexp #{createName}
			</if>
			<if test="orderNumber != null and orderNumber != ''">
				and t.order_number regexp #{orderNumber}
			</if>
			<if test="packType != null">
				and cp.pack_type = #{packType}
			</if>
			<if test="customerName != null and customerName != ''">
				and cus.customer_name regexp #{customerName}
			</if>
			<if test="loginName != null and loginName != ''">
				and cus.login_name regexp #{loginName}
			</if>
			<if test="routeName != null and routeName != ''">
				and route.route_name regexp #{routeName}
			</if>
			<if test="destination != null and destination != ''">
				and route.destination regexp #{destination}
			</if>
			<if test="routeType != null">
				and route.route_type = #{routeType}
			</if>
			<if test="startTime != null and startTime != ''">
				and t.create_time between #{startTime} and #{endTime}
			</if>
		</where>
		order by t.create_time desc
		limit #{pageNumber}, #{pageSize}
	</select>

	<insert id="insert" parameterType="com.example.warehouse.entity.sys.UserPacked">
		insert into user_packed
		<trim prefix="(" suffix=")" suffixOverrides=",">
			create_time, 
			create_id, 
			create_name, 
			status, 
			version, 
			remarks, 
			pack_id, 
			order_number, 
			pack_num, 
			actual_weight, 
			actual_vol, 
		</trim>
		values
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<include refid="Insert_Column_Values"/>
		</trim>
	</insert>
	
	<insert id="insertSelective" parameterType="com.example.warehouse.entity.sys.UserPacked">
		insert into user_packed
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<include refid="Base_Column_List_NotNull"/>
		</trim>
		values
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<include refid="Insert_Column_Values_NotNull"/>
		</trim>
	</insert>
	
	<update id="updateByPrimaryKey" parameterType="com.example.warehouse.entity.sys.UserPacked">
		update user_packed
		<set>
			<include refid="Update_Column"/>
		</set>
		
		<where>
		id = #{id} and status = 1
		</where>
		
	</update>
	
	<update id="updateByPrimaryKeySelective" parameterType="com.example.warehouse.entity.sys.UserPacked">
		update user_packed
		<set>
			<include refid="Update_Column_NotNull"/>
		</set>
		<where>
		id = #{id} and status = 1
		</where>
	</update>

	<!-- 删除数据（逻辑删除） -->
	<update id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		update  user_packed
		set `status` = 0
		where id = #{id,jdbcType=INTEGER}
	</update>
	
	<!-- 移除数据（物理删除） -->
	<delete id="removeByPrimaryKey" parameterType="java.lang.Integer">
		delete from user_packed
		where id = #{id,jdbcType=INTEGER}
	</delete>
	
</mapper>