<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.warehouse.mapper.insurance.InsuranceMapper">
    <resultMap id="BaseResultMap" type="com.example.warehouse.entity.insurance.Insurance">
        <id column="id" jdbcType="INTEGER" property="id"/>
    	
	    <result column="create_id" jdbcType="INTEGER" property="createId"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="update_id" jdbcType="INTEGER" property="updateId"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
        <result column="status" jdbcType="INTEGER" property="status"/>
        <result column="version" jdbcType="INTEGER" property="version"/>
        <result column="remarks" jdbcType="VARCHAR" property="remarks"/>
        <result column="insurance_no" jdbcType="VARCHAR" property="insuranceNo"/>
        <result column="insurance_name" jdbcType="VARCHAR" property="insuranceName"/>
        <result column="claims_detail" jdbcType="VARCHAR" property="claimsDetail"/>
    		
    </resultMap>
	
	<!-- 字段 -->
	<sql id="Base_Column_List">
		id, create_id, create_time, update_id, update_time, status, version, remarks, insurance_no, insurance_name, claims_detail
	</sql>
	
	<!-- 插入字段实际数值 -->
	<sql id="Insert_Column_Values">
		#{createId},#{createTime},#{updateId},#{updateTime},#{status},#{version},#{remarks},#{insuranceNo},#{insuranceName},#{claimsDetail}
	</sql>
	
	<!-- 插入字段（判空） -->
	<sql id="Base_Column_List_NotNull">
		<if test="createId != null and createId != ''">
			create_id, 
		</if>
    	<if test="createTime != null and createTime != ''">
			create_time, 
		</if>
    	<if test="updateId != null and updateId != ''">
			update_id, 
		</if>
    	<if test="updateTime != null and updateTime != ''">
			update_time, 
		</if>
    	<if test="status != null and status != ''">
			status, 
		</if>
    	<if test="version != null and version != ''">
			version, 
		</if>
    	<if test="remarks != null and remarks != ''">
			remarks, 
		</if>
    	<if test="insuranceNo != null and insuranceNo != ''">
			insurance_no, 
		</if>
    	<if test="insuranceName != null and insuranceName != ''">
			insurance_name, 
		</if>
    	<if test="claimsDetail != null and claimsDetail != ''">
			claims_detail, 
		</if>
    	
	</sql>
	
	<!-- 插入字段实际数值(判空) -->
	<sql id="Insert_Column_Values_NotNull">
		<if test="createId != null and createId != ''">
			#{createId},
		</if>
    	<if test="createTime != null and createTime != ''">
			#{createTime},
		</if>
    	<if test="updateId != null and updateId != ''">
			#{updateId},
		</if>
    	<if test="updateTime != null and updateTime != ''">
			#{updateTime},
		</if>
    	<if test="status != null and status != ''">
			#{status},
		</if>
    	<if test="version != null and version != ''">
			#{version},
		</if>
    	<if test="remarks != null and remarks != ''">
			#{remarks},
		</if>
    	<if test="insuranceNo != null and insuranceNo != ''">
			#{insuranceNo},
		</if>
    	<if test="insuranceName != null and insuranceName != ''">
			#{insuranceName},
		</if>
    	<if test="claimsDetail != null and claimsDetail != ''">
			#{claimsDetail},
		</if>
    	
	</sql>
	
	<!-- 更新字段 -->
	<sql id="Update_Column">
		create_id = #{createId},
    	create_time = #{createTime},
    	update_id = #{updateId},
    	update_time = #{updateTime},
    	status = #{status},
    	version = #{version},
    	remarks = #{remarks},
    	insurance_no = #{insuranceNo},
    	insurance_name = #{insuranceName},
    	claims_detail = #{claimsDetail},
    	
	</sql>
	
	<!-- 更新字段（判空） -->
	<sql id="Update_Column_NotNull">
		<if test="createId != null and createId != ''">
			create_id = #{createId},
		</if>
    	<if test="createTime != null and createTime != ''">
			create_time = #{createTime},
		</if>
    	<if test="updateId != null and updateId != ''">
			update_id = #{updateId},
		</if>
    	<if test="updateTime != null and updateTime != ''">
			update_time = #{updateTime},
		</if>
    	<if test="status != null and status != ''">
			status = #{status},
		</if>
    	<if test="version != null and version != ''">
			version = #{version},
		</if>
    	<if test="remarks != null and remarks != ''">
			remarks = #{remarks},
		</if>
    	<if test="insuranceNo != null and insuranceNo != ''">
			insurance_no = #{insuranceNo},
		</if>
    	<if test="insuranceName != null and insuranceName != ''">
			insurance_name = #{insuranceName},
		</if>
    	<if test="claimsDetail != null and claimsDetail != ''">
			claims_detail = #{claimsDetail},
		</if>
    	
	</sql>
	
	<select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <trim suffixOverrides=",">
        <include refid="Base_Column_List"/>
        </trim>
        from insurance
        where id = #{id,jdbcType=INTEGER}
    </select>
	
	<insert id="insert" parameterType="com.example.warehouse.entity.insurance.Insurance">
		insert into insurance
		<trim prefix="(" suffix=")" suffixOverrides=",">
			create_id, 
			create_time, 
			update_id, 
			update_time, 
			status, 
			version, 
			remarks, 
			insurance_no, 
			insurance_name, 
			claims_detail, 
					</trim>
		values
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<include refid="Insert_Column_Values"/>
		</trim>
	</insert>
	
	<insert id="insertSelective" parameterType="com.example.warehouse.entity.insurance.Insurance"
			useGeneratedKeys="true" keyProperty="id">
		insert into insurance
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<include refid="Base_Column_List_NotNull"/>
		</trim>
		values
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<include refid="Insert_Column_Values_NotNull"/>
		</trim>
	</insert>
	
	<update id="updateByPrimaryKey" parameterType="com.example.warehouse.entity.insurance.Insurance">
		update insurance
		<set>
			<include refid="Update_Column"/>
		</set>
		
		<where>
		id = #{id} and status = 1
		</where>
		
	</update>
	
	<update id="updateByPrimaryKeySelective" parameterType="com.example.warehouse.entity.insurance.Insurance">
		update insurance
		<set>
			<include refid="Update_Column_NotNull"/>
		</set>
		<where>
		id = #{id} and status = 1
		</where>
	</update>
	
	<!-- 移除数据（物理删除） -->
	<delete id="removeByPrimaryKey" parameterType="java.lang.Integer">
		delete from insurance
		where id = #{id,jdbcType=INTEGER}
	</delete>
	
	<!-- 删除数据（逻辑删除） -->
	<update id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		update  insurance
		set `status` = 0
		where id = #{id,jdbcType=INTEGER}
	</update>

	<select id="selectAllNumber" resultType="java.lang.Integer">
		select count(id)
		from insurance
	</select>

	<select id="selectCount" resultType="java.lang.Integer" parameterType="com.example.warehouse.vo.insurance.InsuranceReqVo">
		select count(t.id)
		from insurance t
		left join `user` u on u.id = t.create_id and u.`status` = 1
		<where>
			t.`status` = 1
			<if test="commercialAreaId!= null">
				and u.commercial_area_id = #{commercialAreaId}
			</if>
			<if test="insuranceName != null and insuranceName != ''">
				and t.insurance_name regexp #{insuranceName}
			</if>
		</where>
	</select>

	<select id="selectInsurance" resultMap="InsuranceRespVo" parameterType="com.example.warehouse.vo.insurance.InsuranceReqVo">
		select <include refid="InsuranceRespVoColumns"/>
		from insurance t
		left join `user` u on u.id = t.create_id and u.`status` = 1
		<where>
			t.`status` = 1
			<if test="commercialAreaId!= null">
				and u.commercial_area_id = #{commercialAreaId}
			</if>
			<if test="insuranceName != null and insuranceName != ''">
				and t.insurance_name regexp #{insuranceName}
			</if>
		</where>
		limit #{pageNumber}, #{pageSize}
	</select>

	<select id="selectInsuranceById" resultMap="InsuranceRespVo">
		select <include refid="InsuranceRespVoColumns"/>
		from insurance t
		left join `user` u on u.id = t.create_id and u.`status` = 1
		where t.`status` = 1
		and t.id = #{id}
	</select>
    <select id="selectInsuranceByOrderNumber" resultMap="InsuranceRespVo">
		select <include refid="Base_Column_List"/>
		from insurance t
		where t.`status` = 1
		and t.id = (
			select insurance_id
			from transportation_route t
			left join customer_pack cp on cp.transportation_route_id = t.id and cp.status = 1
			where cp.order_number = #{orderNumber}
			and t.status = 1
		)
	</select>

    <sql id="InsuranceRespVoColumns">
		t.id, t.create_id, t.update_id,
		DATE_FORMAT(t.create_time,'%Y-%m-%d %k:%i:%s') as create_time,
    	DATE_FORMAT(t.update_time,'%Y-%m-%d %k:%i:%s') as update_time,
		t.status, t.version,
		t.remarks, t.insurance_no, t.insurance_name,
		t.claims_detail, u.username
	</sql>

	<resultMap id="InsuranceRespVo" extends="BaseResultMap" type="com.example.warehouse.vo.insurance.InsuranceRespVo">
		<result column="username" property="createName"/>
		<collection property="insurancePrices" column="id" select="com.example.warehouse.mapper.insurance.InsurancePriceMapper.selectByInsuranceId"/>
	</resultMap>

</mapper>