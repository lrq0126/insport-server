<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.warehouse.mapper.customerGroup.CustomerGroupLinkMapper">
	<resultMap id="BaseResultMap" type="com.example.warehouse.entity.customerGroup.CustomerGroupLink">
		<id column="id" jdbcType="INTEGER" property="id"/>

		<result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
		<result column="create_id" jdbcType="INTEGER" property="createId"/>
		<result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
		<result column="update_id" jdbcType="INTEGER" property="updateId"/>
		<result column="status" jdbcType="INTEGER" property="status"/>
		<result column="version" jdbcType="INTEGER" property="version"/>
		<result column="remarks" jdbcType="VARCHAR" property="remarks"/>
		<result column="customer_group_id" jdbcType="INTEGER" property="customerGroupId"/>
		<result column="customer_id" jdbcType="INTEGER" property="customerId"/>

	</resultMap>

	<!-- 字段 -->
	<sql id="Base_Column_List">
		id, create_time,create_id, status,
		version, remarks, customer_group_id,
		customer_id
	</sql>

	<!-- 插入字段实际数值 -->
	<sql id="Insert_Column_Values">
		#{createTime},#{createId},#{updateTime},#{updateId},#{status},#{version},#{remarks},#{customerGroupId},#{customerId}
	</sql>

	<!-- 插入字段（判空） -->
	<sql id="Base_Column_List_NotNull">
		<if test="createTime != null and createTime != ''">
			create_time,
		</if>
		<if test="createId != null and createId != ''">
			create_id,
		</if>
		<if test="updateTime != null and updateTime != ''">
			update_time,
		</if>
		<if test="updateId != null and updateId != ''">
			update_id,
		</if>
		<if test="status != null and status != ''">
			status,
		</if>
		<if test="version != null and version != ''">
			version,
		</if>
		<if test="remarks != null and remarks != ''">
			remarks,
		</if>
		<if test="customerGroupId != null and customerGroupId != ''">
			customer_group_id,
		</if>
		<if test="customerId != null and customerId != ''">
			customer_id,
		</if>

	</sql>

	<!-- 插入字段实际数值(判空) -->
	<sql id="Insert_Column_Values_NotNull">
		<if test="createTime != null and createTime != ''">
			#{createTime},
		</if>
		<if test="createId != null and createId != ''">
			#{createId},
		</if>
		<if test="updateTime != null and updateTime != ''">
			#{updateTime},
		</if>
		<if test="updateId != null and updateId != ''">
			#{updateId},
		</if>
		<if test="status != null and status != ''">
			#{status},
		</if>
		<if test="version != null and version != ''">
			#{version},
		</if>
		<if test="remarks != null and remarks != ''">
			#{remarks},
		</if>
		<if test="customerGroupId != null and customerGroupId != ''">
			#{customerGroupId},
		</if>
		<if test="customerId != null and customerId != ''">
			#{customerId},
		</if>

	</sql>

	<!-- 更新字段 -->
	<sql id="Update_Column">
		create_time = #{createTime},
    	create_id = #{createId},
    	update_time = #{updateTime},
    	update_id = #{updateId},
    	status = #{status},
    	version = #{version},
    	remarks = #{remarks},
    	customer_group_id = #{customerGroupId},
    	customer_id = #{customerId},

	</sql>

	<!-- 更新字段（判空） -->
	<sql id="Update_Column_NotNull">
		<if test="createTime != null and createTime != ''">
			create_time = #{createTime},
		</if>
		<if test="createId != null and createId != ''">
			create_id = #{createId},
		</if>
		<if test="updateTime != null and updateTime != ''">
			update_time = #{updateTime},
		</if>
		<if test="updateId != null and updateId != ''">
			update_id = #{updateId},
		</if>
		<if test="status != null and status != ''">
			status = #{status},
		</if>
		<if test="version != null and version != ''">
			version = #{version},
		</if>
		<if test="remarks != null and remarks != ''">
			remarks = #{remarks},
		</if>
		<if test="customerGroupId != null and customerGroupId != ''">
			customer_group_id = #{customerGroupId},
		</if>
		<if test="customerId != null and customerId != ''">
			customer_id = #{customerId},
		</if>

	</sql>

	<select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List"/>
		from customer_group_link
		where id = #{id,jdbcType=INTEGER}
	</select>

	<insert id="insert" parameterType="com.example.warehouse.entity.customerGroup.CustomerGroupLink">
		insert into customer_group_link
		(create_time,create_id, status,
		version, remarks, customer_group_id,
		customer_id)
		values
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<include refid="Insert_Column_Values"/>
		</trim>
	</insert>

	<insert id="insertSelective" parameterType="com.example.warehouse.entity.customerGroup.CustomerGroupLink">
		insert into customer_group_link
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<include refid="Base_Column_List_NotNull"/>
		</trim>
		values
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<include refid="Insert_Column_Values_NotNull"/>
		</trim>
	</insert>

	<update id="updateByPrimaryKey" parameterType="com.example.warehouse.entity.customerGroup.CustomerGroupLink">
		update customer_group_link
		<set>
			<include refid="Update_Column"/>
		</set>

		<where>
			id = #{id} and status = 1
		</where>

	</update>

	<update id="updateByPrimaryKeySelective" parameterType="com.example.warehouse.entity.customerGroup.CustomerGroupLink">
		update customer_group_link
		<set>
			<include refid="Update_Column_NotNull"/>
		</set>
		<where>
			id = #{id} and status = 1
		</where>
	</update>

	<!-- 移除数据（物理删除） -->
	<delete id="removeByPrimaryKey" parameterType="java.lang.Integer">
		delete from customer_group_link
		where id = #{id,jdbcType=INTEGER}
	</delete>


	<!-- 删除数据（逻辑删除） -->
	<update id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		update  customer_group_link
		set `status` = 0
		where id = #{id,jdbcType=INTEGER}
	</update>

	<insert id="insertList" parameterType="java.util.List">
		insert into customer_group_link
		(create_time, create_id, status,
		version, remarks, customer_group_id,
		customer_id)
		values
		<foreach collection="customerGroupLinkList" item="item" separator=",">
			(
			#{item.createTime},#{item.createId},#{item.status},
			#{item.version}, #{item.remarks},#{item.customerGroupId},
			#{item.customerId}
			)
		</foreach>
	</insert>

	<update id="deleteByGroupIdAndCustomerId">
		update customer_group_link
		set
		status = 0,
		update_time = now()
		<where>
			status = 1
			and customer_group_id = #{groupId}
			and customer_id in
			<foreach collection="customerIdList" item="customerId" open="(" close=")" separator=",">
				#{customerId}
			</foreach>
		</where>
	</update>

	<select id="selectCustomerNumByGroupId" resultType="java.lang.Integer">
		select count(id)
		from customer_group_link
		<where>
			status = 1
			and customer_group_id = #{customerGroupId}
		</where>
	</select>

	<select id="selectByGroupId" resultMap="BaseResultMap">
		select <include refid="Base_Column_List"/>
		from customer_group_link
		<where>
			status = 1
			and customer_group_id = #{groupId}
		</where>
	</select>

	<select id="getCusetomerIdByGroupIds" resultType="string" parameterType="list">
		SELECT
		customer_id
		FROM
		customer_group_link
		WHERE
		STATUS = 1 and customer_group_id in
		<foreach collection="groupIds" item="groupId" open="(" close=")" separator=",">
			#{groupId}
		</foreach>
		GROUP BY
		customer_id
	</select>
</mapper>