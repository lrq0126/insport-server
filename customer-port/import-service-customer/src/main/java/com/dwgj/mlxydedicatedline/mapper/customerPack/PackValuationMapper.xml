<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dwgj.mlxydedicatedline.mapper.customerPack.PackValuationMapper">
    <resultMap id="BaseResultMap" type="com.dwgj.mlxydedicatedline.entity.customerPack.PackValuation">
        <id column="id" jdbcType="INTEGER" property="id"/>
    	
	    <result column="create_id" jdbcType="INTEGER" property="createId"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="update_id" jdbcType="INTEGER" property="updateId"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
        <result column="status" jdbcType="INTEGER" property="status"/>
        <result column="version" jdbcType="INTEGER" property="version"/>
        <result column="remarks" jdbcType="VARCHAR" property="remarks"/>
        <result column="pack_id" jdbcType="INTEGER" property="packId"/>
        <result column="order_number" jdbcType="VARCHAR" property="orderNumber"/>
        <result column="product_name" jdbcType="VARCHAR" property="productName"/>
        <result column="unit_price" jdbcType="DECIMAL" property="unitPrice"/>
        <result column="number" jdbcType="DOUBLE" property="number"/>
        <result column="goods_value" jdbcType="DECIMAL" property="goodsValue"/>
    		
    </resultMap>
	
	<!-- 字段 -->
	<sql id="Base_Column_List">
		id, create_id, create_time, update_id, update_time,
		status, version, remarks, pack_id, order_number,
		product_name, unit_price, `number`, goods_value
	</sql>
	
	<!-- 插入字段实际数值 -->
	<sql id="Insert_Column_Values">
		#{createId},#{createTime},#{updateId},#{updateTime},
		#{status},#{version},#{remarks},#{packId},#{orderNumber},
		#{productName},#{unitPrice},#{number},#{goodsValue}
	</sql>
	
	<!-- 插入字段（判空） -->
	<sql id="Base_Column_List_NotNull">
		<if test="createId != null and createId != ''">
			create_id, 
		</if>
    	<if test="createTime != null and createTime != ''">
			create_time, 
		</if>
    	<if test="updateId != null and updateId != ''">
			update_id, 
		</if>
    	<if test="updateTime != null and updateTime != ''">
			update_time, 
		</if>
    	<if test="status != null and status != ''">
			status, 
		</if>
    	<if test="version != null and version != ''">
			version, 
		</if>
    	<if test="remarks != null and remarks != ''">
			remarks, 
		</if>
    	<if test="packId != null and packId != ''">
			pack_id, 
		</if>
    	<if test="orderNumber != null and orderNumber != ''">
			order_number, 
		</if>
    	<if test="productName != null and productName != ''">
			product_name, 
		</if>
    	<if test="unitPrice != null and unitPrice != ''">
			unit_price, 
		</if>
    	<if test="number != null and number != ''">
			`number`,
		</if>
    	<if test="goodsValue != null and goodsValue != ''">
			goods_value, 
		</if>
    	
	</sql>
	
	<!-- 插入字段实际数值(判空) -->
	<sql id="Insert_Column_Values_NotNull">
		<if test="createId != null and createId != ''">
			#{createId},
		</if>
    	<if test="createTime != null and createTime != ''">
			#{createTime},
		</if>
    	<if test="updateId != null and updateId != ''">
			#{updateId},
		</if>
    	<if test="updateTime != null and updateTime != ''">
			#{updateTime},
		</if>
    	<if test="status != null and status != ''">
			#{status},
		</if>
    	<if test="version != null and version != ''">
			#{version},
		</if>
    	<if test="remarks != null and remarks != ''">
			#{remarks},
		</if>
    	<if test="packId != null and packId != ''">
			#{packId},
		</if>
    	<if test="orderNumber != null and orderNumber != ''">
			#{orderNumber},
		</if>
    	<if test="productName != null and productName != ''">
			#{productName},
		</if>
    	<if test="unitPrice != null and unitPrice != ''">
			#{unitPrice},
		</if>
    	<if test="number != null and number != ''">
			#{number},
		</if>
    	<if test="goodsValue != null and goodsValue != ''">
			#{goodsValue},
		</if>
    	
	</sql>
	
	<!-- 更新字段 -->
	<sql id="Update_Column">
		create_id = #{createId},
    	create_time = #{createTime},
    	update_id = #{updateId},
    	update_time = #{updateTime},
    	status = #{status},
    	version = #{version},
    	remarks = #{remarks},
    	pack_id = #{packId},
    	order_number = #{orderNumber},
    	product_name = #{productName},
    	unit_price = #{unitPrice},
    	`number` = #{number},
    	goods_value = #{goodsValue},
    	
	</sql>
	
	<!-- 更新字段（判空） -->
	<sql id="Update_Column_NotNull">
		<if test="createId != null and createId != ''">
			create_id = #{createId},
		</if>
    	<if test="createTime != null and createTime != ''">
			create_time = #{createTime},
		</if>
    	<if test="updateId != null and updateId != ''">
			update_id = #{updateId},
		</if>
    	<if test="updateTime != null and updateTime != ''">
			update_time = #{updateTime},
		</if>
    	<if test="status != null and status != ''">
			status = #{status},
		</if>
    	<if test="version != null and version != ''">
			version = #{version},
		</if>
    	<if test="remarks != null and remarks != ''">
			remarks = #{remarks},
		</if>
    	<if test="packId != null and packId != ''">
			pack_id = #{packId},
		</if>
    	<if test="orderNumber != null and orderNumber != ''">
			order_number = #{orderNumber},
		</if>
    	<if test="productName != null and productName != ''">
			product_name = #{productName},
		</if>
    	<if test="unitPrice != null and unitPrice != ''">
			unit_price = #{unitPrice},
		</if>
    	<if test="number != null and number != ''">
			`number` = #{number},
		</if>
    	<if test="goodsValue != null and goodsValue != ''">
			goods_value = #{goodsValue},
		</if>
    	
	</sql>
	
	<select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <trim suffixOverrides=",">
        	<include refid="Base_Column_List"/>
        </trim>
        from pack_valuation
        where id = #{id,jdbcType=INTEGER}
    </select>
    <select id="selectPackValuationByPackId" resultMap="BaseResultMap">
		select <include refid="Base_Column_List"/>
		from pack_valuation
		where `status` = 1
		and pack_id = #{packId}
	</select>

    <insert id="insert" parameterType="com.dwgj.mlxydedicatedline.entity.customerPack.PackValuation">
		insert into pack_valuation
		<trim prefix="(" suffix=")" suffixOverrides=",">
			create_id, 
			create_time, 
			update_id, 
			update_time, 
			status, 
			version, 
			remarks, 
			pack_id, 
			order_number, 
			product_name, 
			unit_price, 
			`number`,
			goods_value, 
		</trim>
		values
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<include refid="Insert_Column_Values"/>
		</trim>
	</insert>
	
	<insert id="insertSelective" parameterType="com.dwgj.mlxydedicatedline.entity.customerPack.PackValuation">
		insert into pack_valuation
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<include refid="Base_Column_List_NotNull"/>
		</trim>
		values
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<include refid="Insert_Column_Values_NotNull"/>
		</trim>
	</insert>
	
	<update id="updateByPrimaryKey" parameterType="com.dwgj.mlxydedicatedline.entity.customerPack.PackValuation">
		update pack_valuation
		<set>
			<include refid="Update_Column"/>
		</set>
		
		<where>
		id = #{id} and status = 1
		</where>
		
	</update>
	
	<update id="updateByPrimaryKeySelective" parameterType="com.dwgj.mlxydedicatedline.entity.customerPack.PackValuation">
		update pack_valuation
		<set>
			<include refid="Update_Column_NotNull"/>
		</set>
		<where>
		id = #{id} and status = 1
		</where>
	</update>
	
	<!-- 移除数据（物理删除） -->
	<delete id="removeByPrimaryKey" parameterType="java.lang.Integer">
		delete from pack_valuation
		where id = #{id,jdbcType=INTEGER}
	</delete>

    <!-- 删除数据（逻辑删除） -->
	<update id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		update  pack_valuation
		set `status` = 0
		where id = #{id,jdbcType=INTEGER}
	</update>

	<insert id="insertList" parameterType="java.util.List">
		insert into pack_valuation (
			create_id, create_time,update_id,
			update_time, status, version,
			remarks, pack_id, order_number,
			product_name, unit_price, `number`,
			goods_value)
		values
		<foreach collection="packValuationList" item="item" separator=",">
			(#{item.createId},#{item.createTime},#{item.updateId},
			#{item.updateTime},#{item.status},#{item.version},
			#{item.remarks},#{item.packId},#{item.orderNumber},
			#{item.productName},#{item.unitPrice},#{item.number},
			#{item.goodsValue})
		</foreach>
	</insert>

	<delete id="deleteByPackId">
		update  pack_valuation
		set `status` = 0
		where `status` = 1
		and pack_id = #{packId}
	</delete>
	
</mapper>