<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dwgj.mlxydedicatedline.mapper.CustomerPackMapper">
    <resultMap id="BaseResultMap" type="com.dwgj.mlxydedicatedline.entity.CustomerPack">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
        <result column="status" jdbcType="INTEGER" property="status"/>
        <result column="version" jdbcType="INTEGER" property="version"/>
        <result column="business_number" jdbcType="VARCHAR" property="businessNumber"/>
        <result column="commercial_area_id" jdbcType="INTEGER" property="commercialAreaId"/>
        <result column="commercial_area_name" jdbcType="VARCHAR" property="commercialAreaName"/>
        <result column="order_number" jdbcType="VARCHAR" property="orderNumber"/>
        <result column="user_id" jdbcType="INTEGER" property="userId"/>
        <result column="customer_id" jdbcType="INTEGER" property="customerId"/>
        <result column="pack_type" jdbcType="INTEGER" property="packType"/>
        <result column="unpacking" jdbcType="INTEGER" property="unpacking"/>
        <result column="goods_no" jdbcType="VARCHAR" property="goodsNo"/>
        <result column="goods_sum" jdbcType="INTEGER" property="goodsSum"/>
        <result column="transportation_route_id" jdbcType="INTEGER" property="transportationRouteId"/>
        <result column="pre_quoted_price" jdbcType="DOUBLE" property="preQuotedPrice"/>
        <result column="length" jdbcType="INTEGER" property="length"/>
        <result column="width" jdbcType="INTEGER" property="width"/>
        <result column="height" jdbcType="INTEGER" property="height"/>
        <result column="actual_weight" jdbcType="DOUBLE" property="actualWeight"/>
        <result column="actual_vol" jdbcType="DOUBLE" property="actualVol"/>
        <result column="actual_price" jdbcType="DOUBLE" property="actualPrice"/>
        <result column="address_id" jdbcType="DOUBLE" property="addressId"/>
        <result column="out_storage_time" jdbcType="TIMESTAMP" property="outStorageTime"/>
        <result column="route_type" jdbcType="INTEGER" property="routeType"/>
        <result column="incidental" jdbcType="DOUBLE" property="incidental"/>
        <result column="pack_time" jdbcType="TIMESTAMP" property="packTime"/>
        <result column="settlement_weight" jdbcType="DOUBLE" property="settlementWeight"/>
        <result column="settlement_vol" jdbcType="DOUBLE" property="settlementVol"/>
        <result column="pack_num" jdbcType="INTEGER" property="packNum"/>
        <result column="remarks" jdbcType="VARCHAR" property="remarks"/>
        <result column="international_transshipment_no" jdbcType="VARCHAR" property="internationalTransshipmentNo"/>
        <result column="discount" jdbcType="DECIMAL" property="discount"/>
        <result column="payment_time" jdbcType="TIMESTAMP" property="paymentTime"/>
        <result column="receipt_time" jdbcType="TIMESTAMP" property="receiptTime"/>
        <result column="is_sensitive" jdbcType="INTEGER" property="isSensitive"/>
        <result column="tariffs_price" jdbcType="DECIMAL" property="tariffsPrice"/>
        <result column="insurance_price" jdbcType="DECIMAL" property="insurancePrice"/>
    </resultMap>

    <sql id="table">customer_pack</sql>

    <sql id="Base_Column_List">
        t.id, DATE_FORMAT(t.create_time,'%Y-%m-%d %k:%i:%s') as create_time,DATE_FORMAT(t.update_time,'%Y-%m-%d
        %k:%i:%s') as update_time,
        t.`status`, t.version, t.business_number, t.commercial_area_id, t.commercial_area_name, t.order_number, t.user_id,
        t.customer_id, t.pack_type, t.unpacking, t.goods_no,t.goods_sum, t.transportation_route_id, t.pre_quoted_price,
        t.`length`, t.width, t.height, t.actual_weight, t.actual_vol, t.actual_price, t.address_id,
        DATE_FORMAT(t.out_storage_time,'%Y-%m-%d %k:%i:%s') as out_storage_time, t.route_type, t.incidental, t.pack_time,
        t.settlement_weight, t.settlement_vol, t.pack_num, t.remarks, t.international_transshipment_no, t.discount,
        t.payment_time, t.receipt_time, t.is_sensitive, t.tariffs_price, t.insurance_price
    </sql>

    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from customer_pack t
        where t.id = #{id,jdbcType=INTEGER} and t.`status` = 1
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        delete from customer_pack
        where id = #{id,jdbcType=INTEGER}
    </delete>
    <insert id="insert" keyColumn="id" keyProperty="id" parameterType="com.dwgj.mlxydedicatedline.entity.CustomerPack"
            useGeneratedKeys="true">
        insert into customer_pack (create_time, update_time, `status`,
        version, business_number, commercial_area_id, commercial_area_name, order_number,
        user_id, customer_id, pack_type,
        unpacking, goods_no, goods_sum, transportation_route_id,
        pre_quoted_price, `length`, width,
        height, actual_weight, actual_vol,
        actual_price, address_id,out_storage_time, route_type, incidental, pack_time,
        settlement_weight, settlement_vol, pack_num, remarks, international_transshipment_no,
        discount, payment_time, receipt_time, is_sensitive, tariffs_price, insurance_price)
        values (#{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, #{status,jdbcType=INTEGER},
        #{version,jdbcType=INTEGER}, #{businessNumber,jdbcType=VARCHAR}, #{commercialAreaId,jdbcType=INTEGER},
        #{commercialAreaName,jdbcType=VARCHAR},#{orderNumber,jdbcType=VARCHAR},
        #{userId,jdbcType=INTEGER}, #{customerId,jdbcType=INTEGER}, #{packType,jdbcType=INTEGER},
        #{unpacking,jdbcType=INTEGER}, #{goodsNo,jdbcType=VARCHAR} ,#{goodsSum,jdbcType=INTEGER},
        #{transportationRouteId,jdbcType=INTEGER},
        #{preQuotedPrice,jdbcType=DOUBLE}, #{length,jdbcType=INTEGER}, #{width,jdbcType=INTEGER},
        #{height,jdbcType=INTEGER}, #{actualWeight,jdbcType=DOUBLE}, #{actualVol,jdbcType=DOUBLE},
        #{actualPrice,jdbcType=DOUBLE},#{addressId,jdbcType=INTEGER},#{outStorageTime,jdbcType=TIMESTAMP},#{routeType,jdbcType=INTEGER},
        #{incidental}, #{packTime}, #{settlementWeight}, #{settlementVol}, #{packNum}, #{remarks},#{internationalTransshipmentNo},
        #{discount}, #{paymentTime}, #{receiptTime}, #{isSensitive}, #{tariffsPrice}, #{insurancePrice} )
    </insert>
    <insert id="insertSelective" keyColumn="id" keyProperty="id"
            parameterType="com.dwgj.mlxydedicatedline.entity.CustomerPack" useGeneratedKeys="true">
        insert into customer_pack
        <trim prefix="(" suffix=")" suffixOverrides=",">
            create_time,
            update_time,
            `status`,
            version,
            <if test="businessNumber != null and businessNumber != ''">
                business_number,
            </if>
            <if test="commercialAreaId != null and commercialAreaId != ''">
                commercial_area_id,
            </if>
            <if test="commercialAreaName != null and commercialAreaName != ''">
                commercial_area_name,
            </if>
            <if test="orderNumber != null and orderNumber != ''">
                order_number,
            </if>
            <if test="userId != null and userId != ''">
                user_id,
            </if>
            <if test="customerId != null and customerId != ''">
                customer_id,
            </if>
            pack_type,
            unpacking,
            <if test="goodsNo != null and goodsNo != ''">
                goods_no,
            </if>
            <if test="goodsSum != null and goodsSum != ''">
                goods_sum,
            </if>
            <if test="transportationRouteId != null and transportationRouteId != ''">
                transportation_route_id,
            </if>
            <if test="preQuotedPrice != null and preQuotedPrice != ''">
                pre_quoted_price,
            </if>
            <if test="length != null and length != ''">
                `length`,
            </if>
            <if test="width != null and width != ''">
                width,
            </if>
            <if test="height != null and height != ''">
                height,
            </if>
            <if test="actualWeight != null and actualWeight != ''">
                actual_weight,
            </if>
            <if test="actualVol != null and actualVol != ''">
                actual_vol,
            </if>
            <if test="actualPrice != null and actualPrice != ''">
                actual_price,
            </if>
            <if test="addressId != null and addressId != ''">
                address_id,
            </if>
            <if test="routeType != null and routeType != ''">
                route_type,
            </if>
            <if test="incidental != null and incidental != ''">
                incidental,
            </if>
            <if test="packTime != null">
                pack_time,
            </if>
            <if test="settlementWeight != null and settlementWeight != ''">
                settlement_weight,
            </if>
            <if test="settlementVol != null and settlementVol != ''">
                settlement_vol,
            </if>
            <if test="packNum != null and packNum != ''">
                pack_num,
            </if>
            <if test="remarks != null and remarks != ''">
                remarks,
            </if>
            <if test="internationalTransshipmentNo != null and internationalTransshipmentNo != ''">
                international_transshipment_no,
            </if>
            <if test="discount != null and discount != ''">
                discount,
            </if>
            <if test="isSensitive != null and isSensitive != ''">
                is_sensitive,
            </if>
            <if test="tariffsPrice != null">
                tariffs_price,
            </if>
            <if test="insurancePrice != null">
                insurance_price,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            now(),
            now(),
            1,
            1,
            <if test="businessNumber != null and businessNumber != ''">
                #{businessNumber,jdbcType=VARCHAR},
            </if>
            <if test="commercialAreaId != null and commercialAreaId != ''">
                #{commercialAreaId,jdbcType=INTEGER},
            </if>
            <if test="commercialAreaName != null and commercialAreaName != ''">
                #{commercialAreaName,jdbcType=VARCHAR},
            </if>
            <if test="orderNumber != null and orderNumber != ''">
                #{orderNumber,jdbcType=VARCHAR},
            </if>
            <if test="userId != null and userId != ''">
                #{userId,jdbcType=INTEGER},
            </if>
            <if test="customerId != null and customerId != ''">
                #{customerId,jdbcType=INTEGER},
            </if>
            1,
            1,
            <if test="goodsNo != null and goodsNo != ''">
                #{goodsNo,jdbcType=VARCHAR},
            </if>
            <if test="goodsSum != null and goodsSum != ''">
                #{goodsSum},
            </if>
            <if test="transportationRouteId != null and transportationRouteId != ''">
                #{transportationRouteId,jdbcType=INTEGER},
            </if>
            <if test="preQuotedPrice != null and preQuotedPrice != ''">
                #{preQuotedPrice,jdbcType=DOUBLE},
            </if>
            <if test="length != null and length != ''">
                #{length,jdbcType=INTEGER},
            </if>
            <if test="width != null and width != ''">
                #{width,jdbcType=INTEGER},
            </if>
            <if test="height != null and height != ''">
                #{height,jdbcType=INTEGER},
            </if>
            <if test="actualWeight != null and actualWeight != ''">
                #{actualWeight,jdbcType=DOUBLE},
            </if>
            <if test="actualVol != null and actualVol != ''">
                #{actualVol,jdbcType=DOUBLE},
            </if>
            <if test="actualPrice != null and actualPrice != ''">
                #{actualPrice,jdbcType=DOUBLE},
            </if>
            <if test="addressId != null and addressId != ''">
                #{addressId,jdbcType=INTEGER},
            </if>
            <if test="routeType != null and routeType != ''">
                #{routeType},
            </if>
            <if test="incidental != null and incidental != ''">
                #{incidental},
            </if>
            <if test="packTime != null">
                #{packTime},
            </if>
            <if test="settlementWeight != null and settlementWeight != ''">
                #{settlementWeight},
            </if>
            <if test="settlementVol != null and settlementVol != ''">
                #{settlementVol},
            </if>
            <if test="packNum != null and packNum != ''">
                #{packNum},
            </if>
            <if test="remarks != null and remarks != ''">
                #{remarks},
            </if>
            <if test="internationalTransshipmentNo != null and internationalTransshipmentNo != ''">
                #{internationalTransshipmentNo},
            </if>
            <if test="discount != null and discount != ''">
                #{discount},
            </if>
            <if test="isSensitive != null and isSensitive != ''">
                #{isSensitive},
            </if>
            <if test="tariffsPrice != null">
                #{tariffsPrice},
            </if>
            <if test="insurancePrice != null">
                #{insurancePrice},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.dwgj.mlxydedicatedline.entity.CustomerPack">
        update customer_pack
        <set>
            update_time = now(),
            <if test="status != null and status != ''">
                `status` = #{status,jdbcType=INTEGER},
            </if>
            <if test="version != null and version != ''">
                version = #{version,jdbcType=INTEGER},
            </if>
            <if test="businessNumber != null and businessNumber != ''">
                business_number = #{businessNumber,jdbcType=VARCHAR},
            </if>
            <if test="commercialAreaId != null and commercialAreaId != ''">
                commercial_area_id = #{commercialAreaId,jdbcType=INTEGER},
            </if>
            <if test="commercialAreaName != null and commercialAreaName != ''">
                commercial_area_name = #{commercialAreaName,jdbcType=VARCHAR},
            </if>
            <if test="orderNumber != null and orderNumber != ''">
                order_number = #{orderNumber,jdbcType=VARCHAR},
            </if>
            <if test="userId != null and userId != ''">
                user_id = #{userId,jdbcType=INTEGER},
            </if>
            <if test="customerId != null and customerId != ''">
                customer_id = #{customerId,jdbcType=INTEGER},
            </if>
            <if test="packType != null and packType != ''">
                pack_type = #{packType,jdbcType=INTEGER},
            </if>
            <if test="unpacking != null and unpacking != ''">
                unpacking = #{unpacking,jdbcType=INTEGER},
            </if>
            <if test="goodsNo != null and goodsNo != ''">
                goods_no = #{goodsNo,jdbcType=VARCHAR},
            </if>
            <if test="goodsSum != null and goodsSum != ''">
                goods_sum = #{goodsSum},
            </if>
            <if test="transportationRouteId != null and transportationRouteId != ''">
                transportation_route_id = #{transportationRouteId,jdbcType=INTEGER},
            </if>
            <if test="preQuotedPrice != null and preQuotedPrice != ''">
                pre_quoted_price = #{preQuotedPrice,jdbcType=DOUBLE},
            </if>
            <if test="length != null and length != ''">
                `length` = #{length,jdbcType=INTEGER},
            </if>
            <if test="width != null and width != ''">
                width = #{width,jdbcType=INTEGER},
            </if>
            <if test="height != null and height != ''">
                height = #{height,jdbcType=INTEGER},
            </if>
            <if test="actualWeight != null and actualWeight != ''">
                actual_weight = #{actualWeight,jdbcType=DOUBLE},
            </if>
            <if test="actualVol != null and actualVol != ''">
                actual_vol = #{actualVol,jdbcType=DOUBLE},
            </if>
            <if test="actualPrice != null and actualPrice != ''">
                actual_price = #{actualPrice,jdbcType=DOUBLE},
            </if>
            <if test="addressId != null and addressId != ''">
                address_id = #{addressId,jdbcType=INTEGER},
            </if>
            <if test="routeType != null and routeType != ''">
                route_type = #{routeType},
            </if>
            <if test="incidental != null and incidental != ''">
                incidental = #{incidental},
            </if>
            <if test="settlementWeight != null and settlementWeight != ''">
                settlement_weight = #{settlementWeight},
            </if>
            <if test="settlementVol != null and settlementVol != ''">
                settlement_vol = #{settlementVol},
            </if>
            <if test="packNum != null and packNum != ''">
                pack_num = #{packNum},
            </if>
            <if test="remarks != null and remarks != ''">
                remarks = #{remarks},
            </if>
            <if test="internationalTransshipmentNo != null and internationalTransshipmentNo != ''">
                international_transshipment_no = #{internationalTransshipmentNo},
            </if>
            <if test="discount != null and discount != ''">
                discount = #{discount},
            </if>
            <if test="isSensitive != null and isSensitive != ''">
                is_sensitive = #{isSensitive},
            </if>
            <if test="tariffsPrice != null">
                tariffs_price = #{tariffsPrice},
            </if>
            <if test="insurancePrice != null">
                insurance_price = #{insurancePrice},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.dwgj.mlxydedicatedline.entity.CustomerPack">
        update customer_pack
        set create_time = #{createTime,jdbcType=TIMESTAMP},
        update_time = now(),
        `status` = #{status,jdbcType=INTEGER},
        version = #{version,jdbcType=INTEGER},
        business_number = #{businessNumber,jdbcType=VARCHAR},
        commercial_area_id = #{commercialAreaId,jdbcType=INTEGER},
        commercial_area_name = #{commercialAreaName,jdbcType=VARCHAR},
        order_number = #{orderNumber,jdbcType=VARCHAR},
        user_id = #{userId,jdbcType=INTEGER},
        customer_id = #{customerId,jdbcType=INTEGER},
        pack_type = #{packType,jdbcType=INTEGER},
        unpacking = #{unpacking,jdbcType=INTEGER},
        goods_no = #{goodsNo,jdbcType=VARCHAR},
        goods_sum = #{goodsSum},
        transportation_route_id = #{transportationRouteId,jdbcType=INTEGER},
        pre_quoted_price = #{preQuotedPrice,jdbcType=DOUBLE},
        `length` = #{length,jdbcType=INTEGER},
        width = #{width,jdbcType=INTEGER},
        height = #{height,jdbcType=INTEGER},
        actual_weight = #{actualWeight,jdbcType=DOUBLE},
        actual_vol = #{actualVol,jdbcType=DOUBLE},
        actual_price = #{actualPrice,jdbcType=DOUBLE},
        address_id = #{addressId,jdbcType=INTEGER},
        out_storage_time = #{outStorageTime,jdbcType=TIMESTAMP},
        route_type = #{routeType},
        incidental = #{incidental},
        pack_time = #{packTime},
        settlement_weight = #{settlementWeight},
        settlement_vol = #{settlementVol},
        pack_num = #{packNum},
        remarks = #{remarks},
        international_transshipment_no = #{internationalTransshipmentNo},
        discount = #{discount},
        is_sensitive = #{isSensitive},
        tariffs_price = #{tariffsPrice},
        insurance_price = #{insurancePrice}
        where id = #{id,jdbcType=INTEGER}
    </update>

    <select id="findToBeShipped" parameterType="java.util.Map" resultMap="GoodsPackVoMap">
        select
        <include refid="VoSelectCols"/>
        ,(select count(pmo.id) as con from ping_main_order pmo where pmo.status = 1 and pmo.order_number = t.order_number) as is_pin
        ,(select pm.is_packed from ping_main pm where pm.status = 1 and pm.id =
              (select pmo.p_id as con from ping_main_order pmo where pmo.status = 1 and pmo.order_number = t.order_number)) as is_packed
        from
        <include refid="table"/> t
        left join customer_pack_receiver_address cuta on cuta.customer_pack_id = t.id and cuta.status = 1
        left join transportation_route tr on tr.id = t.transportation_route_id
        where t.customer_id = #{customerId} and t.`status` = 1
        and t.pack_type in
        <foreach collection="packTypes" item="packType" open="(" close=")" separator=",">
            #{packType}
        </foreach>
        <if test="addressee != null and addressee != ''">
            and cuta.addressee like concat('%', #{addressee}, '%')
        </if>
        <if test="phoneNumber != null and phoneNumber != ''">
            and cuta.phone_number like concat('%', #{phoneNumber}, '%')
        </if>
        <if test="businessNumber != null and businessNumber != ''">
            and t.business_number like concat('%', #{businessNumber}, '%')
        </if>
        <if test="commercialAreaId != null and commercialAreaId != ''">
            and t.commercial_area_id = #{commercialAreaId}
        </if>
        <if test="commercialAreaName != null and commercialAreaName != ''">
            and t.commercial_area_name = #{commercialAreaName}
        </if>
        <if test="orderNumber != null and orderNumber != '' ">
            and t.order_number like concat('%', #{orderNumber}, '%')
        </if>
        <if test="internationalTransshipmentNo != null and internationalTransshipmentNo != '' ">
            and t.international_transshipment_no like concat('%', #{internationalTransshipmentNo}, '%')
        </if>
        <if test=" deliveryOrderNo != null and deliveryOrderNo != ''">
            AND t.id IN (
            SELECT
            pack_id
            FROM
            goods2pack
            WHERE
            goods_id in (
            SELECT
            id
            FROM
            goods
            WHERE
            delivery_order_no LIKE CONCAT('%', #{deliveryOrderNo}, '%')
            )
            )
        </if>
        order BY t.create_time desc
        LIMIT #{pageNumber},#{pageSize}
    </select>

    <select id="countFindToBeShipped" parameterType="java.util.Map" resultType="int">
        select
        count(1) as count
        from
        <include refid="table"/>
        t
        left join customer_pack_receiver_address cuta on cuta.customer_pack_id = t.id and cuta.status = 1
        left join transportation_route tr on tr.id = t.transportation_route_id
        where t.customer_id = #{customerId} and t.`status` = 1
        and t.pack_type in
        <foreach collection="packTypes" item="packType" open="(" close=")" separator=",">
            #{packType}
        </foreach>
        <if test="addressee != null and addressee != ''">
            and cuta.addressee like concat('%', #{addressee}, '%')
        </if>
        <if test="phoneNumber != null and phoneNumber != ''">
            and cuta.phone_number like concat('%', #{phoneNumber}, '%')
        </if>
        <if test="businessNumber != null and businessNumber != ''">
            and t.business_number like concat('%', #{businessNumber}, '%')
        </if>
        <if test="commercialAreaId != null and commercialAreaId != ''">
            and t.commercial_area_id = #{commercialAreaId}
        </if>
        <if test="commercialAreaName != null and commercialAreaName != ''">
            and t.commercial_area_name = #{commercialAreaName}
        </if>
        <if test="orderNumber != null and orderNumber != '' ">
            and t.order_number like concat('%', #{orderNumber}, '%')
        </if>
        <if test="internationalTransshipmentNo != null and internationalTransshipmentNo != '' ">
            and t.international_transshipment_no like concat('%', #{internationalTransshipmentNo}, '%')
        </if>
        <if test=" deliveryOrderNo != null and deliveryOrderNo != ''">
            AND t.id IN (
            SELECT
            pack_id
            FROM
            goods2pack
            WHERE
            goods_id in (
            SELECT
            id
            FROM
            goods
            WHERE
            delivery_order_no LIKE CONCAT('%', #{deliveryOrderNo}, '%')
            )
            )
        </if>
    </select>

    <select id="findByBusinessNumber" parameterType="java.lang.String" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from
        <include refid="table"/>
        t
        where t.business_number = #{businessNumber} and t.`status` = 1
    </select>

    <select id="findVoByBusinessNumber" parameterType="java.lang.String" resultMap="CustomerPackVoMap">
        select
        <include refid="VoSelectCols"/>
        from
        <include refid="table"/> t
        left join customer_pack_receiver_address cuta on cuta.customer_pack_id = t.id and cuta.status = 1
        left join transportation_route tr on tr.id = t.transportation_route_id
        where
            t.`status` = 1
            and t.business_number = #{businessNumber}
    </select>

    <!-- 客户确认发货，设置付款时间 -->
    <update id="confirmShipment" parameterType="java.lang.String">
        update
        <include refid="table"/>
        set pack_type = 3, update_time = now(), payment_time = now()
        where `status` = 1 and business_number in
        <foreach collection="businessNumberList" item="businessNumber" open="(" close=")" separator=",">
            #{businessNumber}
        </foreach>
    </update>

    <!-- 客户确认发货，设置付款时间 -->

    <update id="confirmShipmentById" parameterType="com.dwgj.mlxydedicatedline.entity.CustomerPack">
        update
        <include refid="table"/>
        <set>
            pack_type = 3,
            update_time = now(),
            payment_time = now(),
            actual_price = #{actualPrice},
            <if test="tariffsPrice != null">
                tariffs_price = #{tariffsPrice},
            </if>
            <if test="insurancePrice != null">
                insurance_price = #{insurancePrice},
            </if>
        </set>
        where `status` = 1
        and id = #{id}
    </update>

    <!--<update id="confirmShipmentById" parameterType="java.lang.Integer">
        update
        <include refid="table"/>
        set
            pack_type = 3,
            update_time = now(),
            payment_time = now()
        where `status` = 1
        and id = #{customerPackId}
    </update>-->

    <select id="countFindPageNumber" parameterType="java.util.Map" resultType="java.lang.Integer">
        select
        count(t.id) as count
        from
        <include refid="table"/>
        t
        left join customer_pack_receiver_address cuta on cuta.customer_pack_id = t.id and cuta.status = 1
        left join goods2pack g2p on g2p.pack_id = t.id
        left join goods goods on goods.id = g2p.goods_id
        where t.customer_id = #{customerId} and t.`status` = 1
        and t.pack_type in
        <foreach collection="packTypes" item="packType" open="(" close=")" separator=",">
            #{packType}
        </foreach>
        <if test="addressee != null and addressee != ''">
            and cuta.addressee like concat('%', #{addressee}, '%')
        </if>
        <if test="phoneNumber != null and phoneNumber != ''">
            and cuta.phone_number like concat('%', #{phoneNumber}, '%')
        </if>
        <if test="businessNumber != null and businessNumber != ''">
            and t.business_number like concat('%', #{businessNumber}, '%')
        </if>
        <if test="commercialAreaId != null and commercialAreaId != ''">
            and t.commercial_area_id = #{commercialAreaId}
        </if>
        <if test="commercialAreaName != null and commercialAreaName != ''">
            and t.commercial_area_name = #{commercialAreaName}
        </if>
        <if test="orderNumber != null and orderNumber != '' ">
            and t.order_number like concat('%', #{orderNumber}, '%')
        </if>
        <if test=" deliveryOrderNo != null and deliveryOrderNo != ''">
            and goods.delivery_order_no like concat('%', #{deliveryOrderNo}, '%')
        </if>
        <if test="internationalTransshipmentNo != null and internationalTransshipmentNo != '' ">
            and t.international_transshipment_no like concat('%', #{internationalTransshipmentNo}, '%')
        </if>
    </select>

    <update id="unpack" parameterType="java.lang.String">
        update
        <include refid="table"/>
        set pack_type = 7
        where business_number = #{businessNumber}
    </update>

    <update id="deleteByBusinessNumber" parameterType="java.lang.String">
        update
        <include refid="table"/>
        set `status` = 0
        where business_number = #{businessNumber}
    </update>

    <select id="findByBusinessNumbers" parameterType="java.util.List" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from
        <include refid="table"/>
        t
        where t.`status` = 1 and t.business_number in
        <foreach collection="businessNumbers" item="businessNumber" open="(" close=")" separator=",">
            #{businessNumber}
        </foreach>
    </select>

    <select id="findByOrderNumbers" parameterType="java.util.List" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from
        <include refid="table"/>
        t
        where t.`status` = 1 and t.order_number in
        <foreach collection="orderNumberList" item="orderNumber" open="(" close=")" separator=",">
            #{orderNumber}
        </foreach>
    </select>

    <!-- 客户签收包裹 -->
    <update id="receipt" parameterType="java.lang.Integer" >
        update
        <include refid="table"/>
        set
            pack_type = 9 ,
            receipt_time = now()
        where `status` = 1 and id = #{packId}
    </update>

    <insert id="insertList" parameterType="java.util.List">
        insert into customer_pack
        (create_time, update_time, `status`, version, business_number, commercial_area_id, commercial_area_name, order_number,
        user_id, customer_id, pack_type, goods_sum, unpacking,
        goods_no, route_type, transportation_route_id, pre_quoted_price,
        `length`, width, height, actual_weight, actual_vol,
        actual_price, address_id, out_storage_time, pack_time,
        settlement_weight, settlement_vol, pack_num, remarks,
        incidental, international_transshipment_no, discount,
        payment_time, receipt_time, is_sensitive, tariffs_price, insurance_price)
        values
        <foreach collection="customerPackList" item="item" separator=",">
            (now(), #{item.updateTime}, 1, 0, #{item.businessNumber}, #{item.commercialAreaId},
            #{item.commercialAreaName}, #{item.orderNumber},
            #{item.userId}, #{item.customerId}, #{item.packType}, #{item.goodsSum}, #{item.unpacking},
            #{item.goodsNo},#{item.routeType}, #{item.transportationRouteId}, #{item.preQuotedPrice},
            #{item.length}, #{item.width}, #{item.height},#{item.actualWeight}, #{item.actualVol},
            #{item.actualPrice},#{item.addressId}, #{item.outStorageTime}, #{item.packTime},
            #{item.settlementWeight},#{item.settlementVol},#{item.packNum}, #{item.remarks},
            #{item.incidental}, #{item.internationalTransshipmentNo}, #{item.discount},
            #{item.paymentTime}, #{item.receiptTime}, #{item.isSensitive}, #{item.tariffsPrice},
            #{item.insurancePrice})
        </foreach>
    </insert>

    <update id="updateListByOrderNumber" parameterType="java.util.List">
        <foreach collection="customerPackList" item="item" separator=";">
            update
            <include refid="table"/>
            <set>
                update_time = now(),
                version = #{item.version} + 1,
                <if test="item.incidental != null and item.incidental != ''">
                    incidental = #{item.incidental},
                </if>
                <if test="item.internationalTransshipmentNo != null and item.internationalTransshipmentNo != ''">
                    international_transshipment_no = #{item.internationalTransshipmentNo},
                </if>
                <if test="item.discount != null and item.discount != ''">
                    discount = #{item.discount},
                </if>
                <if test="item.remarks != null and item.remarks != ''">
                    remarks = #{item.remarks},
                </if>
                <if test="item.actualPrice != null and item.actualPrice != ''">
                    actual_price = #{item.actualPrice},
                </if>
                <if test="item.actualWeight != null and item.actualWeight != ''">
                    actual_weight = #{item.actualWeight,jdbcType=DOUBLE},
                </if>
                <if test="item.actualVol != null and item.actualVol != ''">
                    actual_vol = #{item.actualVol,jdbcType=DOUBLE},
                </if>
                <if test="item.settlementWeight != null and item.settlementWeight != ''">
                    settlement_weight = #{item.settlementWeight},
                </if>
                <if test="item.settlementVol != null and item.settlementVol != ''">
                    settlement_vol = #{item.settlementVol},
                </if>
                <if test="item.packNum != null and item.packNum != ''">
                    pack_num = #{item.packNum},
                </if>
                <if test="item.isSensitive != null and item.isSensitive != ''">
                    is_sensitive = #{item.isSensitive},
                </if>
                <if test="tariffsPrice != null">
                    tariffs_price = #{tariffsPrice},
                </if>
                <if test="insurancePrice != null">
                    insurance_price = #{insurancePrice},
                </if>
            </set>
            <where>
                order_number = #{item.orderNumber} and version = #{item.version}
            </where>
        </foreach>
    </update>
    <update id="updatePackByIdAndType">
        update
        <include refid="table"/>
        <set>
            update_time = now(),
            pack_type = #{packType}
        </set>
        <where>
            id = #{id}
        </where>
    </update>

    <update id="updateCustomerId">
        update customer_pack
        <set>
            customer_id = #{customerId}
        </set>
        <where>
            id in
            <foreach collection="customerPackList" item="item" open="(" separator="," close=")">
                #{item.id}
            </foreach>
        </where>
    </update>

    <select id="getCustomerPackByCustomerIdAndPackType" resultMap="CustomerPackVoMap">
        select
        t.id,
        DATE_FORMAT(t.create_time, '%Y-%m-%d %k:%i:%s') as create_time,
        DATE_FORMAT(t.receipt_time, '%Y-%m-%d %k:%i:%s') as receipt_time,
        t.actual_price, t.business_number, t.commercial_area_id, t.commercial_area_name, t.order_number,
        t.pack_type, t.customer_id,
        tr.route_name, tr.transport_type, tr.transportation_time
        from customer_pack t
        left join transportation_route tr on t.transportation_route_id = tr.id and tr.`status` = 1
        <where>
            t.`status` = 1
            and t.customer_id = #{customerId}
            <if test="packType != null">
                and t.pack_type = #{packType}
            </if>
        </where>
    </select>

    <select id="getUnEvaluatePackByCustomer" resultMap="CustomerPackVoMap">
        select
        t.id,
        DATE_FORMAT(t.create_time, '%Y-%m-%d %k:%i:%s') as create_time,
        DATE_FORMAT(t.receipt_time, '%Y-%m-%d %k:%i:%s') as receipt_time,
        t.actual_price, t.business_number, t.commercial_area_id, t.commercial_area_name, t.order_number,
        t.pack_type, t.customer_id,
        tr.route_name, tr.transport_type, tr.transportation_time
        from customer_pack t
        left join transportation_route tr on t.transportation_route_id = tr.id and tr.`status` = 1
        <where>
            t.`status` = 1
            and t.pack_type = 9
            and t.customer_id = #{customerId}
            <if test="evaluateOrderIdList != null">
                and t.id not in
                <foreach collection="evaluateOrderIdList" item="id" open="(" close=")" separator=",">
                    #{id}
                </foreach>
            </if>
        </where>
    </select>

    <select id="selectPackByPackId" resultMap="EvaluatePackVoMap">
        select
        t.id, t.business_number, t.commercial_area_id, t.commercial_area_name, t.order_number,
        t.pack_type, t.customer_id, t.transportation_route_id,
        t.actual_weight, t.settlement_weight, t.actual_vol,t.settlement_vol,
        DATE_FORMAT(t.out_storage_time, '%Y-%m-%d %k:%i:%s') as out_storage_time,
        DATE_FORMAT(t.pack_time, '%Y-%m-%d %k:%i:%s') as pack_time,
        DATE_FORMAT(t.payment_time,'%Y-%m-%d %k:%i:%s') as payment_time,
        DATE_FORMAT(t.receipt_time,'%Y-%m-%d %k:%i:%s') as receipt_time,
        cus.customer_name,
        tr.route_name, tr.transport_type, tr.transportation_time,
        cpra.receiver_address, cpra.phone_number, cpra.addressee, cpra.code
        from customer_pack t
        left join customer cus on t.customer_id = cus.id and cus.`status` = 1
        left join transportation_route tr on tr.id = t.transportation_route_id and tr.`status` = 1
        left join customer_pack_receiver_address cpra on cpra.customer_pack_id = t.id and cpra.`status` = 1
        <where>
            t.`status` = 1
            and t.id = #{packId}
        </where>
    </select>


    <sql id="VoSelectCols">
        t.id,
        t.`status`, t.version, t.business_number, t.commercial_area_id,
        t.commercial_area_name, t.order_number, t.user_id,
        t.customer_id, t.pack_type, t.unpacking, t.goods_no, t.address_id,
        t.goods_sum, t.transportation_route_id, t.pre_quoted_price,
        t.`length`, t.width, t.height, t.actual_weight, t.settlement_weight,
        t.actual_vol,t.settlement_vol, t.actual_price,
        t.create_time, t.update_time,t.out_storage_time,t.pack_time,
        t.route_type, t.remarks, t.incidental, t.is_sensitive,
        t.international_transshipment_no, t.discount, t.pack_num,
        t.tariffs_price, t.insurance_price, t.payment_time,
        tr.destination, tr.route_name, tr.transport_type,
        tr.transportation_time, tr.is_tariffs, tr.tariffs,
        tr.is_insurance, tr.insurance_id,
        cuta.receiver_address, cuta.phone_number, cuta.addressee,
        cuta.code
    </sql>


    <resultMap id="GoodsPackVoMap" type="com.dwgj.mlxydedicatedline.vo.GoodsPackVo">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
        <result column="status" jdbcType="INTEGER" property="status"/>
        <result column="version" jdbcType="INTEGER" property="version"/>
        <result column="business_number" jdbcType="VARCHAR" property="businessNumber"/>
        <result column="commercial_area_id" jdbcType="INTEGER" property="commercialAreaId"/>
        <result column="commercial_area_name" jdbcType="VARCHAR" property="commercialAreaName"/>
        <result column="order_number" jdbcType="VARCHAR" property="orderNumber"/>
        <result column="user_id" jdbcType="INTEGER" property="userId"/>
        <result column="customer_id" jdbcType="INTEGER" property="customerId"/>
        <result column="pack_type" jdbcType="INTEGER" property="packType"/>
        <result column="unpacking" jdbcType="INTEGER" property="unpacking"/>
        <result column="goods_no" jdbcType="VARCHAR" property="goodsNo"/>
        <result column="goods_sum" jdbcType="INTEGER" property="goodsSum"/>
        <result column="transportation_route_id" jdbcType="INTEGER" property="transportationRouteId"/>
        <result column="pre_quoted_price" jdbcType="DOUBLE" property="preQuotedPrice"/>
        <result column="length" jdbcType="INTEGER" property="length"/>
        <result column="width" jdbcType="INTEGER" property="width"/>
        <result column="height" jdbcType="INTEGER" property="height"/>
        <result column="actual_weight" jdbcType="DOUBLE" property="actualWeight"/>
        <result column="settlement_weight" jdbcType="DOUBLE" property="settlementWeight"/>
        <result column="actual_vol" jdbcType="DOUBLE" property="actualVol"/>
        <result column="settlement_vol" jdbcType="DOUBLE" property="settlementVol"/>
        <result column="actual_price" jdbcType="DOUBLE" property="actualPrice"/>
        <result column="address_id" jdbcType="DOUBLE" property="addressId"/>
        <result column="out_storage_time" jdbcType="TIMESTAMP" property="outStorageTime"/>
        <result column="route_type" jdbcType="INTEGER" property="routeType"/>
        <result column="incidental" jdbcType="DOUBLE" property="incidental"/>
        <result column="pack_time" jdbcType="TIMESTAMP" property="packTime"/>
        <result column="pack_num" jdbcType="INTEGER" property="packNum"/>
        <result column="remarks" jdbcType="VARCHAR" property="remarks"/>
        <result column="international_transshipment_no" jdbcType="VARCHAR" property="internationalTransshipmentNo"/>
        <result column="discount" jdbcType="DECIMAL" property="discount"/>
        <result column="route_name" property="routeName"/>
        <result column="transport_type" property="transportType"/>
        <result column="transportation_time" property="transportationTime"/>
        <result column="phone_number" property="phoneNumber"/>
        <result column="addressee" property="addressee"/>
        <result column="receiver_address" property="address"/>
        <result column="code" property="code"/>
        <result column="is_pin" property="isPin"/>
        <result column="is_packed" property="isPacked"/>
        <result column="tariffs_price" jdbcType="DECIMAL" property="tariffsPrice"/>
        <result column="insurance_price" jdbcType="DECIMAL" property="insurancePrice"/>

        <collection property="goods2pack" column="id" select="com.dwgj.mlxydedicatedline.mapper.goods2pack.Goods2packMapper.findByPackId"/>
    </resultMap>

    <resultMap id="CustomerPackVoMap" extends="BaseResultMap" type="com.dwgj.mlxydedicatedline.vo.pack.CustomerPackRespVo">
        <!--<collection property="route" column="route_id" select="com.dwgj.mlxydedicatedline.mapper.TransportationRouteMapper.findByRouteIdNotStatus"/>-->
        <result column="destination" property="destination"/>
        <result column="route_name" property="routeName"/>
        <result column="transport_type" property="transportType"/>
        <result column="transportation_time" property="transportationTime"/>

        <result column="is_tariffs" property="isTariffs"/>
        <result column="tariffs" property="tariffs"/>
        <result column="is_insurance" property="isInsurance"/>
        <result column="insurance_id" property="insuranceId"/>

        <result column="receiver_address" property="address"/>
        <result column="phone_number" property="phoneNumber"/>
        <result column="addressee" property="addressee"/>
        <result column="code" property="code"/>

        <collection property="currencyData" column="transportation_route_id" select="com.dwgj.mlxydedicatedline.mapper.sysDictDetail.SysDictDetailDao.selectDictByRouteId"/>

        <collection property="goods" column="id" select="com.dwgj.mlxydedicatedline.mapper.GoodsMapper.findByPackId"/>

        <collection property="insurance" column="insurance_id" select="com.dwgj.mlxydedicatedline.mapper.insurance.InsuranceMapper.selectInsuranceById"/>

        <collection property="customerCoupons" column="{customerId = customer_id, orderNumber = order_number}"
                    select="com.dwgj.mlxydedicatedline.mapper.coupons.CustomerCouponsMapper.findByOrderNumber"/>

        <collection property="packValuations" column="id"
                    select="com.dwgj.mlxydedicatedline.mapper.customerPack.PackValuationMapper.selectPackValuationByPackId"/>

        <collection property="packInsurancePrice" column="id"
                    select="com.dwgj.mlxydedicatedline.mapper.customerPack.PackInsurancePriceMapper.selectPackInsurancePriceByPackId"/>

        <collection property="customerPackNumberVos" column="id"
                    select="com.dwgj.mlxydedicatedline.mapper.customerPack.CustomerPackNumberMapper.findByPackId"/>

        <collection property="priceDetail" column="id"
                    select="com.dwgj.mlxydedicatedline.mapper.customerPack.CustomerPackPriceDetailMapper.selectPackPriceDetailByPackId"/>

        <collection property="integrals" column="customer_id" select="com.dwgj.mlxydedicatedline.mapper.customer.CustomerIntegralMapper.selectIntegralSum"/>
    </resultMap>
    <resultMap id="EvaluatePackVoMap" extends="BaseResultMap" type="com.dwgj.mlxydedicatedline.vo.pack.CustomerPackRespVo">
        <!--<collection property="route" column="route_id" select="com.dwgj.mlxydedicatedline.mapper.TransportationRouteMapper.findByRouteIdNotStatus"/>-->
        <result column="customer_name" property="customerName"/>

        <result column="destination" property="destination"/>
        <result column="route_name" property="routeName"/>
        <result column="transport_type" property="transportType"/>
        <result column="transportation_time" property="transportationTime"/>

        <result column="receiver_address" property="address"/>
        <result column="phone_number" property="phoneNumber"/>
        <result column="addressee" property="addressee"/>
        <result column="code" property="code"/>

    </resultMap>


    <select id="getOrderSum" resultType="java.lang.Integer">
        select count(id)
        from customer_pack
        <where>
            status = 1
            and customer_id = #{customerId}
        </where>
    </select>

    <select id="getPayAmountSum" resultType="java.math.BigDecimal">
        select IFNULL(sum(actual_price), 0)
        from customer_pack
        <where>
            status = 1
            and customer_id = #{customerId}
        </where>
    </select>

    <select id="findPackByCustomerId" resultMap="BaseResultMap">
        select <include refid="Base_Column_List"/>
        from customer_pack t
        <where>
            t.status = 1
            and t.customer_id = #{customerId}
        </where>
    </select>
</mapper>
